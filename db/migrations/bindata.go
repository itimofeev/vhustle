// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xc1\x6f\x9b\x30\x18\xc5\xef\xfe\x2b\xbe\x5b\x89\xb6\x4a\xdd\xb9\x27\x37\xb8\xab\x35\x02\xa9\x31\x5b\xbb\x8b\xc5\xc0\x6d\xac\x18\x1b\xd9\xa6\x59\xff\xfb\x41\x1a\x08\xca\x76\x60\xdf\x05\xf9\xf7\xde\x43\xf6\xa7\x77\x7d\x0d\x9f\x1a\xf5\xea\xca\x20\xa1\x68\x51\x7f\xcc\x1f\x13\x50\x06\xbc\xac\x82\xb2\x06\xae\x8a\xf6\x0a\x94\x07\xf9\x5b\x56\x5d\x90\x35\x1c\x76\xd2\x40\xd8\xf5\xe8\x23\x37\x98\xfa\x43\xd9\xb6\x5a\xc9\x1a\xa1\x98\x65\x5b\xe0\xf8\x2e\x21\x40\xef\x81\x3c\xd1\x9c\xe7\x50\x59\x13\xa4\x0f\xb7\x68\xcd\x08\xe6\xe4\xa4\x9f\x28\x8a\x10\x80\xaa\x61\x3e\x77\xf4\x6b\x4e\x18\xc5\x09\x6c\x19\xdd\x60\xf6\x0c\xdf\xc8\x33\x40\x9a\x71\x48\x8b\x24\xf9\xdc\x27\x82\x0a\x5a\x9e\x13\xdf\x31\x5b\x3f\x60\x16\x7d\xb9\xb9\x59\x8d\x6c\x6e\xaf\x87\x27\x9e\x27\x1e\xae\x71\x31\x97\x76\xe1\x83\x5b\xf8\xf7\x4a\x85\x77\x61\xca\x46\x2e\xb3\xbf\x58\xd7\x35\xa2\x73\x7a\x99\xfd\x6d\x2f\xb4\x32\xfb\x7f\x3d\x75\x90\x5b\x27\x9d\x7c\x9d\x2c\x97\x72\x65\x9b\xc6\x1a\xa1\xcc\x8b\x1d\x64\x4e\x9e\xf8\x80\x9d\xf4\x9d\x0e\x7e\x8c\x8d\xf8\x4d\xd5\xd2\x4e\x74\xc2\xed\xce\x86\xbf\x70\xcf\xbb\xf6\xb8\xa9\x71\xbb\x9c\x6e\x48\xce\xf1\x66\x0b\x3f\x28\x7f\xc8\x0a\x7e\x24\xf0\x33\x4b\x09\xc4\xe4\x1e\x17\x09\x07\x63\x0f\xd1\xf1\x62\xba\xf4\x41\xf8\x77\x53\x7d\xc4\xff\x23\xdb\x87\xd7\x59\x9a\x73\x86\x69\xca\xc7\x1e\x09\x31\xad\x55\x88\x22\xa5\x8f\x05\x81\xd3\x27\x9a\x94\x15\x5a\xdd\x22\x34\xaf\x7d\x6c\x0f\x66\x2c\xfe\xd4\xfa\x01\x2e\xea\xbd\xb3\x5a\xf7\xea\xaf\xb2\xda\xcf\xab\x3f\x15\xfe\x4f\x00\x00\x00\xff\xff\x38\xd2\x76\x0f\x61\x03\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 865, mode: os.FileMode(420), modTime: time.Unix(1482617195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1482617202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql": dbMigrations001_initialSql,
	"db/migrations/bindata.go":      dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": {nil, map[string]*bintree{
		"migrations": {nil, map[string]*bintree{
			"001_initial.sql": {dbMigrations001_initialSql, map[string]*bintree{}},
			"bindata.go":      {dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
