// Code generated by go-bindata.
// sources:
// db/migrations/001_initial.sql
// db/migrations/002_avatar_file.sql
// db/migrations/bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xc1\x6f\x9b\x30\x18\xc5\xef\xfe\x2b\xbe\x5b\x89\xb6\x4a\xdd\xb9\x27\x37\xb8\xab\x35\x02\xa9\x31\x5b\xbb\x8b\xc5\xc0\x6d\xac\x18\x1b\xd9\xa6\x59\xff\xfb\x41\x1a\x08\xca\x76\x60\xdf\x05\xf9\xf7\xde\x43\xf6\xa7\x77\x7d\x0d\x9f\x1a\xf5\xea\xca\x20\xa1\x68\x51\x7f\xcc\x1f\x13\x50\x06\xbc\xac\x82\xb2\x06\xae\x8a\xf6\x0a\x94\x07\xf9\x5b\x56\x5d\x90\x35\x1c\x76\xd2\x40\xd8\xf5\xe8\x23\x37\x98\xfa\x43\xd9\xb6\x5a\xc9\x1a\xa1\x98\x65\x5b\xe0\xf8\x2e\x21\x40\xef\x81\x3c\xd1\x9c\xe7\x50\x59\x13\xa4\x0f\xb7\x68\xcd\x08\xe6\xe4\xa4\x9f\x28\x8a\x10\x80\xaa\x61\x3e\x77\xf4\x6b\x4e\x18\xc5\x09\x6c\x19\xdd\x60\xf6\x0c\xdf\xc8\x33\x40\x9a\x71\x48\x8b\x24\xf9\xdc\x27\x82\x0a\x5a\x9e\x13\xdf\x31\x5b\x3f\x60\x16\x7d\xb9\xb9\x59\x8d\x6c\x6e\xaf\x87\x27\x9e\x27\x1e\xae\x71\x31\x97\x76\xe1\x83\x5b\xf8\xf7\x4a\x85\x77\x61\xca\x46\x2e\xb3\xbf\x58\xd7\x35\xa2\x73\x7a\x99\xfd\x6d\x2f\xb4\x32\xfb\x7f\x3d\x75\x90\x5b\x27\x9d\x7c\x9d\x2c\x97\x72\x65\x9b\xc6\x1a\xa1\xcc\x8b\x1d\x64\x4e\x9e\xf8\x80\x9d\xf4\x9d\x0e\x7e\x8c\x8d\xf8\x4d\xd5\xd2\x4e\x74\xc2\xed\xce\x86\xbf\x70\xcf\xbb\xf6\xb8\xa9\x71\xbb\x9c\x6e\x48\xce\xf1\x66\x0b\x3f\x28\x7f\xc8\x0a\x7e\x24\xf0\x33\x4b\x09\xc4\xe4\x1e\x17\x09\x07\x63\x0f\xd1\xf1\x62\xba\xf4\x41\xf8\x77\x53\x7d\xc4\xff\x23\xdb\x87\xd7\x59\x9a\x73\x86\x69\xca\xc7\x1e\x09\x31\xad\x55\x88\x22\xa5\x8f\x05\x81\xd3\x27\x9a\x94\x15\x5a\xdd\x22\x34\xaf\x7d\x6c\x0f\x66\x2c\xfe\xd4\xfa\x01\x2e\xea\xbd\xb3\x5a\xf7\xea\xaf\xb2\xda\xcf\xab\x3f\x15\xfe\x4f\x00\x00\x00\xff\xff\x38\xd2\x76\x0f\x61\x03\x00\x00")

func dbMigrations001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations001_initialSql,
		"db/migrations/001_initial.sql",
	)
}

func dbMigrations001_initialSql() (*asset, error) {
	bytes, err := dbMigrations001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/001_initial.sql", size: 865, mode: os.FileMode(420), modTime: time.Unix(1482617195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations002_avatar_fileSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xce\xcf\x2b\x49\x2d\x2e\x51\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\x2c\x4b\x2c\x49\x2c\x8a\x4f\xcb\xcc\x49\x55\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x34\x30\xd0\xb4\xe6\xe2\x42\x36\xc9\x25\xbf\x3c\x0f\xab\x51\x2e\x41\xfe\x01\x58\xcc\xb2\xe6\x02\x04\x00\x00\xff\xff\x9e\x51\x36\x0b\x88\x00\x00\x00")

func dbMigrations002_avatar_fileSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations002_avatar_fileSql,
		"db/migrations/002_avatar_file.sql",
	)
}

func dbMigrations002_avatar_fileSql() (*asset, error) {
	bytes, err := dbMigrations002_avatar_fileSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/002_avatar_file.sql", size: 136, mode: os.FileMode(420), modTime: time.Unix(1485607417, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\xdb\x6e\xdb\x38\x13\xbe\xb6\x9e\x82\x35\xd0\x42\xfe\xe1\xdf\xd6\xf9\x60\xa0\x37\x3d\x2c\xd0\x8b\xb6\xc0\xb6\x7b\xb5\x5e\x04\x14\x49\x79\x85\xb5\x2d\x57\x92\xbb\x4e\x83\xbe\xfb\xce\xc7\xa1\x1d\x27\x8d\x13\xec\x21\x80\x22\x91\x9c\xf9\xe6\x3c\x1c\xcf\xe7\xe2\x75\xab\x8d\x58\x99\xad\xe9\xe4\x60\xb4\xa8\xae\xc5\xaa\xfd\x7f\xd5\x6c\xb5\x1c\xe4\xcc\x23\x82\xbe\xdd\x77\xca\xf4\x0b\x7c\xeb\x6a\xbe\x69\x56\x44\xd9\xb4\xdb\x7e\x1e\x04\xe1\x55\xb3\x6d\x86\x46\xae\x67\xfd\x97\xf5\x43\x04\xd1\x95\xfc\x4a\x40\xdd\x55\xdd\xac\xcd\xc3\x44\x47\x59\xab\x16\x67\x6f\x3e\x8a\x0f\x1f\x3f\x8b\xb7\x6f\xde\x7d\x7e\xe6\x79\x3b\xa9\xfe\x90\x2b\x23\x6e\xc9\x3d\xaf\xd9\xec\xda\x6e\x10\xbe\x37\x1a\x57\xd7\x83\xe9\xc7\xf4\xa1\xda\xcd\xae\x33\x7d\x3f\x5f\x7d\x6b\x76\xd8\xa8\x37\x03\x5e\x4d\xcb\xff\xe7\x4d\xbb\x1f\x9a\x35\x16\xad\x65\xd8\xc9\xe1\xf7\x39\x74\xc2\x07\x36\xfa\xa1\x6b\xb6\x2b\x7b\x36\x34\x1b\x33\xf6\x26\x9e\x57\xef\xb7\x4a\x38\xf5\x7e\x36\x52\xfb\xf8\x10\xbf\xfe\x06\xb1\x53\xb1\x95\x1b\x23\x98\x6d\x22\xfc\xe3\xae\xe9\xba\xb6\x9b\x88\x1b\x6f\xb4\xfa\x66\x57\x62\xf1\x52\x40\xab\xd9\x07\xf3\x27\x40\x4c\xe7\x5b\xb5\xb1\x7e\xb5\xaf\x6b\x5a\x03\x76\x32\xf1\x46\x4d\x6d\x19\x9e\xbd\x14\xdb\x66\x0d\x88\x51\x67\x86\x7d\xb7\xc5\x72\x2a\xc8\xa4\xd9\x5b\xa0\xd7\xfe\x18\x40\xe2\xf9\x97\x85\x78\xfe\x75\xcc\x9a\x58\x59\x84\xf1\xdd\xf3\x46\x5f\x65\x27\xaa\x7d\x2d\x58\x0e\x0b\xf1\x46\x57\xac\xce\x4b\xd1\xb4\xb3\xd7\xed\xee\xda\x7f\x41\x34\x53\xd2\x8d\xb8\xd4\xfa\xed\x51\xd3\xd9\xeb\x75\xdb\x1b\x9f\xcc\xff\x8f\xf4\x01\x0c\xe3\x5f\x00\x22\x42\xd6\xdb\x6d\x92\x5a\xb3\x57\x50\xdd\x9f\x4c\x41\xe1\xd1\xd9\x70\xbd\x33\x42\xf6\xbd\x19\xe0\xf2\xbd\x1a\x80\x62\xed\x73\xf1\x20\x31\xdb\xba\x15\xa2\xed\x67\x3f\x51\x58\xdf\xd1\xe2\xc4\xe7\x42\x78\xdc\x3f\x43\xb0\x31\xa4\x3f\x0e\xa3\x37\xea\x9b\x6f\x76\xdd\x6c\x87\x2c\xf1\x46\x1b\xd4\x86\x38\x81\xbe\xa7\xa5\xdd\xfc\x4c\x19\x22\x90\x26\x33\x7c\x41\x8e\x4d\x15\xbf\x6e\xee\xcb\x9a\x88\x0f\x24\xc2\x9f\x38\x09\x90\xe9\xac\xac\x9b\x19\xa4\x13\xf3\x65\xde\x4f\xa4\x0e\xf1\x5a\x6d\xee\xb2\x42\xd1\x47\x59\xa1\x2b\xb1\x9e\x69\x7e\x17\x00\xa6\x3d\x05\x00\xe3\x08\xe3\x64\xe8\x0f\x08\xce\xfa\xcb\x20\xef\xfa\x37\x4d\x47\x10\x55\xdb\xae\xcf\xb9\xe5\xba\x7f\xc2\xf2\xeb\x9e\x0d\x37\x5d\x2d\x95\xb9\xf9\x7e\xc6\xed\x52\x02\x59\x7e\xa5\xab\xf7\xa7\xd6\x70\xd6\x8e\x3e\x7d\x59\x53\xa2\x73\x66\xf8\xe3\xe5\x21\xac\x97\x87\xa2\x5a\x1e\x82\x82\x9e\xc0\x3d\xe5\xf2\x90\x19\xda\x77\x7b\x35\xd1\x94\x09\x3d\xd1\xf2\xa0\x42\x3a\xc3\x9a\x78\x62\x3a\x0b\x89\x46\xa5\xcb\x83\xa1\xbd\x9a\x78\x22\xda\xaf\xe8\x9d\xd2\xbb\x20\x9c\x2a\x5b\x1e\x12\xb9\x3c\x68\x4d\xdf\xb4\x8e\x72\xe2\xa3\xa7\x22\x3e\x09\x0c\xe2\x0d\x08\x57\xd2\x59\x1c\x32\x5f\x55\xb1\x4e\xc0\x55\x24\x23\x23\x5e\xa9\x58\x56\x48\xfb\x9a\x68\x25\xe1\xa6\x25\xeb\x56\xd3\x5e\x42\xbc\xa1\x64\x3b\x14\xbd\x73\x3a\xcf\x88\x57\xd3\x79\x40\x38\x35\x68\x49\xae\x26\xdd\x92\x98\xbe\xe9\x5c\xd2\x3a\xc7\x43\xf8\x01\x3d\x65\xcd\x18\x35\xec\x91\x8c\x13\x11\x86\x84\xcd\x84\x9b\xd2\x3b\x27\x1a\xa5\xd8\x6f\x21\xe1\xa4\xf0\x17\x61\x55\x8a\x75\x2c\xc8\x96\x2a\xe2\x3d\x09\x1f\x4a\x96\x15\x48\xf6\x61\x90\xb3\x2e\xb0\x33\x85\x0d\x90\x1b\xb0\x1f\x42\xc5\x7a\x6b\xe2\x4f\xa0\x7b\xe1\x74\xa1\x77\x14\xb3\xdf\x4a\xec\x49\xb6\x41\x3b\xff\xa6\xd0\xb5\x64\xdd\xa1\x2b\x68\xb2\x94\x65\x18\xc4\x0f\xfc\x88\x4d\xc8\xb8\x88\x55\x41\xdf\x31\xc9\xd3\xa0\xa7\xb7\xc9\xd9\x16\xf8\x14\x76\x49\xe8\x4a\x74\x55\xce\xb6\x2b\xcd\xbe\x35\x24\xcf\x24\x7c\x0e\x7f\x45\x05\xdb\x18\x12\x6f\x01\x5f\xd1\x77\x06\x6c\xc3\xbe\xad\x89\x2e\x43\x7c\xcc\x6d\xae\xd8\xfc\x82\x0f\x4b\xce\x0b\xc4\xc9\xfa\x48\x71\xbc\x14\xd1\xc5\x31\xeb\x5a\x22\x96\xd0\xbb\xe0\x9c\x88\x12\xf6\x9f\x56\x9c\x4b\xf0\x37\x7c\x0b\x1f\x94\x86\x75\x07\xc6\x31\x97\xe2\x9a\xf1\xc3\x8c\xe3\x8c\x1c\xc4\x03\x3b\x0b\xcd\x7a\x20\xd7\x25\x7c\x92\x33\x26\x70\xf0\x0e\x0d\xc7\x10\xf2\x81\x57\xe6\x1c\x1f\x43\xdf\x45\xcc\xf8\xf0\x2d\xf2\x0a\x39\x5e\xa4\x6c\x33\xec\x47\xee\x24\x19\xfb\xbd\x22\xda\x8a\xf0\x53\xa2\xd5\x39\xc7\x5a\x92\xde\x39\xed\xe7\xd0\x1b\xb9\xa9\x39\xcf\x23\xf8\x9c\x6c\x8c\x23\xce\x6b\xe4\x5b\x4c\xfb\x79\xca\x79\x02\x99\x56\x47\xec\x29\x7e\x47\xca\xe9\x16\x71\xdc\x51\x9b\x2a\xbb\xcd\x07\xe4\x2b\x7c\x17\x42\x46\xc2\xb1\x80\x8d\xd0\x1d\x31\x03\x06\xe2\x84\x77\x00\x7b\x91\xb7\x8a\xfd\x03\x9a\x84\xde\x3a\x75\x79\x89\x73\xa2\x55\xf4\x6d\x68\x5f\x81\x36\x63\xfb\x72\xc2\x52\x35\xd7\x2f\xe2\x69\x6b\xbc\x64\xff\x61\xaf\x74\xbe\x46\x2c\xc1\x57\xa3\xae\x10\x77\x17\x27\xe4\x52\xee\xe2\x8f\x98\x42\x0f\x1b\xef\xc0\xe5\x43\xc5\xb9\xa3\x12\xce\x41\xc4\x27\xcc\x79\x0f\x75\x95\xc5\x9c\xb3\xc8\x69\x8b\x8d\x5a\x94\x6c\x1b\xfa\x03\x6c\x41\x7c\xd2\x98\x73\x01\x38\xe8\x1f\xa8\x2d\x5d\x71\xfc\x11\x1f\xe4\x86\xcd\xbb\x98\x6d\xcb\x4a\x8e\xa7\x72\x39\x11\xb8\x5e\x25\x09\x23\x4d\xb9\x4f\x46\xe8\x61\xf8\x76\xfd\x06\xf5\xa5\x63\x17\x2b\x57\xfb\x61\xca\x79\x8a\x9c\x07\x7d\x9c\x70\xde\xe5\x2e\x0f\xa1\x3b\xfc\x81\x78\xa2\x97\xea\x84\x6b\x3d\x08\x39\x8f\xd0\x93\x2a\xcd\xf9\x04\x1c\xe4\x1d\xf6\x80\x81\x9e\xa3\x25\xfb\x5f\x3a\x7f\x42\x1e\x70\x92\xfa\xac\xb7\xbb\x7e\x8e\x27\x2e\x38\xa6\xc8\x69\x2b\x9b\xe4\x04\xf1\x91\x6e\x7c\x9c\xf3\x2e\xdf\x24\x6e\x16\x79\x68\xc6\x3b\x4e\x2c\x67\x33\x22\x0d\x37\x8f\xdc\x4a\x53\x3a\x1e\x3f\x3a\x45\x8f\x89\x64\x72\x1a\x29\x2e\x23\x41\xa1\xff\xd9\x89\xe8\x5c\x21\x3b\x12\x9d\xe6\xce\x27\x6d\x7a\x6a\xc6\x3b\x8d\x66\x76\xb8\x22\xc4\x7b\x17\xf5\x0d\x46\x98\x85\x78\xca\x22\x81\x71\x65\x21\x8a\x2c\x9d\x0a\x0c\x1e\x8b\xf3\xb9\xc4\x4f\xa2\x60\x62\xf7\x31\x4e\x2c\x78\xdc\xf8\x65\xdb\x1c\xfc\x30\x29\xa2\x2c\xcc\xc3\x92\xd8\x82\x09\x4d\x92\x12\x2a\xbc\xb0\x46\xdf\x58\x4b\x17\xc2\x19\x0c\xfd\x16\xf6\xff\xf7\x53\x54\xe4\xf4\x91\x51\xe1\xce\x0f\x93\x7f\x3a\x2e\x20\xad\xd0\x32\x50\x1e\x3a\xe0\x72\xc7\x15\x92\x28\x6e\x71\x68\x97\x48\xf3\xa4\x64\x1a\xe0\x45\x9a\xaf\x2b\x13\x71\x2b\x43\xd9\x06\xae\x7d\xe0\x7a\x4e\x23\xa6\xc3\x1a\x2d\xa8\x8e\xf8\x1b\xfc\xc7\x96\x82\xf4\xc7\x08\x02\x5c\xe0\xa1\x6c\xec\xb5\x1d\x30\x8f\xa5\x77\x6b\xb4\xa8\xda\xb5\x0f\x5c\xb3\x78\xd0\x1a\x80\x65\x75\xab\x6e\x75\xc4\x1b\xd7\x1c\x4a\x49\x55\xdc\x52\xcf\x75\x47\xab\xc0\xf5\x65\xf5\xce\x18\xdf\x5e\x67\x11\x8f\x49\x28\x75\xbc\xe1\x0b\xb4\x77\x7b\x8d\xa2\x9d\xe2\x3c\xe3\xeb\x3b\x4a\xb9\x8d\xc6\xae\x15\xa0\x8c\x53\x57\xfa\xb6\x7d\x19\x6e\x05\xb8\x46\x20\x1f\x25\x0f\x1c\x8c\x4f\x41\xf2\x63\x79\x97\xce\xf6\xd8\xb5\xd8\xe2\x3c\x66\x97\xca\xfb\x7e\xf4\xff\x6d\x89\xdf\xc7\x7b\xb0\xcc\x7f\xf8\x2d\xfc\x58\xa9\xdf\x47\xfc\xfb\xe5\x7e\xc1\xc6\x3b\x25\xff\x57\x00\x00\x00\xff\xff\xae\x83\x70\x37\x00\x10\x00\x00")

func dbMigrationsBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsBindataGo,
		"db/migrations/bindata.go",
	)
}

func dbMigrationsBindataGo() (*asset, error) {
	bytes, err := dbMigrationsBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1485607427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/001_initial.sql":     dbMigrations001_initialSql,
	"db/migrations/002_avatar_file.sql": dbMigrations002_avatar_fileSql,
	"db/migrations/bindata.go":          dbMigrationsBindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": {nil, map[string]*bintree{
		"migrations": {nil, map[string]*bintree{
			"001_initial.sql":     {dbMigrations001_initialSql, map[string]*bintree{}},
			"002_avatar_file.sql": {dbMigrations002_avatar_fileSql, map[string]*bintree{}},
			"bindata.go":          {dbMigrationsBindataGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
